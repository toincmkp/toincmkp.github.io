【ふつうのコンパイラをつくろう】

------------------------------------------------------------------------------------------------------------------------
概要
　　そこまでガチなものを手に入れるという感じでやるわけではなく
　　コンパイラの基本、基礎という感じで受け入れ、その上でその他のコンパイラに関する応用への流れをつかめればおけ
　　この先、ソースコードとコンパイラとCPUの関係は切ってもきれないものとなることを感じる
　　つまり基礎を学んでおくことに越したことはない
　　特に今回意識したいものはアセンブリ、リンカ、ローダ、共有ライブラリ

　　章や単元ごとの言いたいことをまとめてあるファイルでもあるようにするため、あとで見返したときにそれさえわかってれば
　　少なくともそれで進めると言う状態になれるように記述


------------------------------------------------------------------------------------------------------------------------
序論
　　コンパイラ作りを始めよう
　　　　実行可能ファイルの説明
　　　　fileコマンド

　　　　gccコマンドの内部手順
　　　　　　ビルド
　　　　　　　　以下四つの手順をまとめた総称

　　　　　　プリプロセス
　　　　　　　　#includeや#define等の処理を行なうコンパイル前の前段階処理

　　　　　　(狭義の)コンパイル
　　　　　　　　プリプロセッサの出力をコンパイラがコンパイル
　　　　　　　　※だけなのか他にはコンパイルしないのかわからん
　　　　　　　　※結論的にはおそらくそんなことはない、アセンブリ言語にするもの全てだと思われる

　　　　　　　　アセンブリ言語のソースを出力

　　　　　　アセンブル
　　　　　　　　アセンブリ言語のソースを機械語に変換
　　　　　　　　アセンブラの出力されるファイルはオブジェクトファイル

　　　　　　　　実行可能ファイルとオブジェクトファイルの違い
　　　　　　　　　　fileコマンドからexecutableかrelocatableの違い
　　　　　　　　　　実行することもライブラリとして使うこともできない
　　　　　　　　　　※今更だがオブジェクトファイルって単純に「リンク前ファイル」って言い切れるのか？

　　　　　　リンク
　　　　　　　　ライブラリを使う場合はこの段階で結合処理が行われる
　　　　　　　　リンクした結果必ず実行可能ファイルになるとは限らず、ライブラリを生成する場合もある

　　　　プログラムの実行環境について
　　　　　　最近のプログラムの実行環境は、動的ロードによるリンク全体を実行時に行なったり
　　　　　　実行中に機械語への翻訳が行われる場合もある

　　　　インタプリタ
　　　　　　言語とその実行方法は自由に組み合わせられる
　　　　　　Rubyを機械語やJavaバイトコードにコンパイルすること等

　　　　型チェックと動的静的
　　　　　　静的な型チェック(static type checking)
　　　　　　　　プログラムの実行を始めるまえに関数の返り値や変数の型をチェック

　　　　　　動的な型チェック(dynamic type checking)
　　　　　　　　プログラムを実行しながらそのつど関数の返り値や変数の型をチェック

　　　　　　静的：プログラムを動かさずに何かをすること
　　　　　　動的：プログラム実行しながら何かをすること

　　　　コンパイルの四つの段階
　　　　　　構文解析
　　　　　　　　パース(parse)、構文解析(syntax analyzing)
　　　　　　　　　　ソースコードを解析してコンピュータにとって理解しやすい形式(構文木)にすること
　　　　　　　　　　それぞれその動作を行なうものを「パーサ：Parser」「構文解析器：Syntax analyzer」

　　　　　　意味解析
　　　　　　　　構文木を解析し情報を取り除いたり付加したりし、抽象構文木(AST:Abstract syntax tree)というデータ構造を作成する処理

　　　　　　　　例：
　　　　　　　　　　ある変数がローカル変数なのかグローバル変数なのか区別
　　　　　　　　　　変数の宣言と参照を結びつける
　　　　　　　　　　返り値のある関数から値を返しているかどうか調べる

　　　　　　中間表現の生成
　　　　　　　　抽象構文木をコンパイラの内部だけで使われる中間表現(IR:Intermediate Representation)という構造に変換
　　　　　　　　複数のプログラミング言語や複数の機械語に対応するために生成
　　　　　　　　gccでの中間表現はRTL(Register Transfer Language)

　　　　　　　　コンパイラのフロントエンド
　　　　　　　　　　ソースコードを解析して中間表現に変換するまでの部分

　　　　　　コード生成
　　　　　　　　中間言語をアセンブリ言語に変換する段階(コード生成：Code generation)

　　　　最適化
　　　　　　現実のコンパイラには四つの段階のほかに最適化(Optimization)が行なわれるフェーズが含まれる

　　Cbとcbc
　　　　Javaによるcbcの実装と利用法

ソースコードの解析
　　構文解析の概要
　　　　実際の解析の種類
　　　　　　字句解析
　　　　　　構文解析
　　　　　　意味解析

　　　　字句解析(Lexcical analyze)
　　　　　　別名スキャン(Scan)
　　　　　　各単語を分割
　　　　　　プログラムにとって意味のない部分は消去
　　　　　　字句解析器(Lexical analyzer, Scaner)

　　　　構文解析の二つの意味
　　　　　　字句解析を含む構文解析
　　　　　　字句解析を分けて考える構文解析

　　　　字句解析の構造
　　　　　　この段階で空白、改行、コメントがなくなる

　　　　　　単語の種類
　　　　　　　　その単語の文法上の分類：54の種類は整数等

　　　　　　意味値(Semantic value)
　　　　　　　　ある文字に対して文字列なのか整数なのか等を付加する値
　　　　　　　　なお予約語は予約語としてすでに意味のある文字として認識される

　　　　　　トークン
　　　　　　　　単語の種類と意味値の総称

　　　　　　字句解析の役割
　　　　　　　　ソースコード(文字の並び)を解析してトークンの列を生成すること

　　　　　　cbcの--dump-tokensオプション
　　　　　　　　任意のソースコード(.cb)をスキャンした結果のトークン列を表示

　　　　ノード
　　　　　　ツリー構造におけるデータ構造の一部

　　　　各種ジェネレータ
　　　　　　スキャナジェネレータ：スキャナを生成するプログラム
　　　　　　パーサジェネレータ　：パーサを生成するプログラム

　　　　　　JavaCC
　　　　　　　　スキャナジェネレータとパーサジェネレー手を兼ね揃え一つのファイルで同時に記述される

　　　　パーサジェネレータの種類
　　　　　　LLパーサジェネレータ
　　　　　　LALRパーサジェネレータ
　　　　　　LRパーサジェネレータ

　　　　コンパイラコンパイラ
　　　　　　読んで字のごとく、結局はパーサジェネレータ


　　字句解析
　　JavaCCによるパーサの記述
　　構文解析

抽象構文木と中間表現
　　JavaCCのアクションと抽象構文木
　　抽象構文木の作成
　　意味解析(1)参照の解決
　　意味解析(2)静的型チェック
　　中間表現への変換

　　………
　　省略
　　………

アセンブリコードの生成

　　・インストラクションポインタとプログラムカウンタは同じ
　　　PCの名前ははgccのマニュアルでよく使われる

　　・ベースポインタと同様の役割をフレームポインタと呼ぶ方が一般的
　　　gccのマニュアルやオプションで登場する

　　・アラインメント
　　　データをメモリに配置する際に特定の数の倍数アドレスに置かなければならないという制約
　　　この制約に違反するとバスエラーというエラーが発生してプログラムが強制終了する場合がある
　　　IA-32は守らなくても基本速度がおちるだけ、構造体とスタックは考慮必要

　　・構造体におけるサイズの違うメンバにおいてのアラインメントの制約として
　　　四バイト境界に整列が行われるパディングが入る
　　　ubuntu14.04でパディング確認

　　・gcc -S -Os
　　　-S アセンブリソースへ出力
　　　-Os オブジェクトファイルのサイズを最小にする最適化フラグ
　　　※ -masm=intel でインテル形式

　　・as -o 出力ファイル名 入力アセンブリソース
　　　オブジェクトファイルに出力

　　・gcc -o 出力ファイル名 オブジェクトファイル
　　　オブジェクトファイルを直接渡すとリンクを行い実行形式へと変換してくれる

　　※バイナリコードからアセンブリ言語への変換
　　　tanka.bin ： バイナリコード

*********************************************
	.section .text
	.global main
	.type	main, @function

main:
	.incbin "tanka.bin"

*********************************************

　　　これを tanka.S として保存
　　　gcc -o 出力ファイル名 tanka.S

　　・GNU as の見方(AT&T)
　　　　インストラクション
　　　　　　実際にCPUが実行する命令を記述する部分

　　　　　　ニーモニック：命令の種類
　　　　　　オペランド　：引数

　　　　　　ニモニックサフィックス(接尾語)
　　　　　　　　b:8バイト
　　　　　　　　w:16バイト
　　　　　　　　l:32バイト

　　　　　　直接メモリ参照：あるアドレスの値を参照

　　　　　　間接メモリ参照：あるアドレスの値をアドレスの番地としてとらえその番地の値を参照
　　　　　　　　disp(base, index, scale)

　　　　　　　　4(%eax)
　　　　　　　　(%ebx, %eax, 4)
　　　　　　　　　　ebxレジスタの値に(eaxレジスタの値 * 4)を足した値
　　　　　　　　　　scale部の値は1, 2, 4, 8のいずれか

　　　　ディレクティブ
　　　　　　ドットで始まり末尾にコロンが付いてない行
　　　　　　CPUではなくアセンブラが処理する命令

　　　　ラベル
　　　　　　コロンで終わっている行
　　　　　　ディレクティブで生成されるデータやインストラクションに名前(シンボル)をつける働きを持つ
　　　　　　アルファベット、数字、_$.が使える
　　　　　　シンボルに.を入れるとC言語の変数と重複する事がない

　　　　コメント
　　　　　　ブロックコメ：/* */
　　　　　　行コメ　　　：#

　　・最適化について
　　　　定数の畳み込み
　　　　　　定数だけの式をコンパイル時に計算

　　　　式の単純化
　　　　　　x * 1 = x, x + 0 = x 等

　　　　演算強度の低減
　　　　　　x * 2 = x + x, シフト命令等

　　　　共通部分式の削除
　　　　　　int x = a * b + c + 1;
　　　　　　int y = 2 + a * b + c;

　　　　　　のとき a * b + c を事前計算し挿入

　　　　不要命令の削除
　　　　　　if(0){
　　　　　　　　***
　　　　　　}

　　　　関数インライン展開
　　　　　　コード量の少ない関数に対し、呼び出しコストを削減するために
　　　　　　呼び出し元で展開しておく手法

　　　　基本的な最適化の分類
　　　　　　実行される命令の数を減らす
　　　　　　より高速な命令を使う
　　　　　　命令を並列に実行する

　　　　変数に対するレジスタの割り当てについて
　　　　　　この作業自体をレジスタ割り当てという
　　　　　　メモリへのアクセスよりもレジスタに直接割り当てられれば高速化する
　　　　　　なのでできるだけ変数をレジスタに割り当てられないかと考える

　　　　　　生存性解析
　　　　　　　　ある二つの変数があるタイミングで互いに使われない場合に
　　　　　　　　どちらも同じレジスタに割り当てることが可能となる（生きていない状態）
　　　　　　　　つまり生きている場合は割り当てられない
　　　　　　　　割り当てるかどうかの方法ではグラフ彩色というアルゴリズムが用いられる

　　　　コントロールフロー解析
　　　　　　基本ブロック
　　　　　　　　ジャンプが発生せず途中からジャンプされもこないブロック

　　　　データフロー解析
　　　　　　データの流れ
　　　　　　　　「この式で計算された値がどこに使われているか」といった情報

　　　　　　中間表現時に行なうSSA形式と呼ばれる方法が一般的(GCCがバージョン4から採用)

　　　　　　SSA形式
　　　　　　　　一つの変数にはただ一度だけ代入が行なわれるように変数に別名を付けて変形した形式

　　　　　　　　int i = x * 5;
　　　　　　　　i += 6;
　　　　　　　　i *= 2;

　　　　　　　　int i0 = x * 5;
　　　　　　　　i1 = i0 + 6;
　　　　　　　　i2 = i1 * 2;



リンクとロード
　　ELFの目的
　　　　機械語のコードとそのコードのメタデータをまとめ、リンカやローダが扱いやすい形式で格納すること

　　　　コードのメタデータ
　　　　　　コードのサイズや変換元のソースファイル名
　　　　　　シンボル
　　　　　　再配置情報
　　　　　　デバッグ用の情報

　　　　シンボル
　　　　　　関数や変数を指す名前

　　　　　　名前の変形
　　　　　　　　元の名前に特定の変換を行なってシンボル名を生成することもある
　　　　　　　　例としてはC++があげられる

　　　　再配置情報
　　　　　　リンクが終わっていないためにまだアドレスが確定できていないコードの位置を示す情報
　　　　　　コードのこの位置にあるメモリ参照はまだ未確定と言う情報をオブジェクトファイルに残しておく

　　ELFの構造
　　　　構造
　　　　　　ELFヘッダ
　　　　　　プログラムヘッダ
　　　　　　各セクション情報
　　　　　　セクションヘッダ

　　　　セクションとセグメント
　　　　　　プログラムヘッダの情報を使って処理するとセグメントの集合が見える
　　　　　　セグメントとしての見方はローダが扱う
　　　　　　セクションヘッダの情報を使って処理するとセクションの集合に見える　　　　　　
　　　　　　セクションとしての味方はアセンブラやリンカが扱う

　　　　readelfコマンド
　　　　　　readelf -S 実行ファイル
　　　　　　　　セクションヘッダの情報の表示

　　　　　　readelf -l 実行ファイル
　　　　　　　　プログラムヘッダの情報の表示

　　　　　　readelf -s 実行ファイル
　　　　　　　　シンボルテーブルの表示

　　　　　　　　TYPE欄
　　　　　　　　　　FILE：ファイル名
　　　　　　　　　　FUNC：関数名

　　　　　　  　BIND欄
　　　　　　　　　　LOCAL ：ファイル内でだけ可視になるシンボル
　　　　　　　　　　GLOBAL：リンク先からも可視になるシンボル

　　　　アセンブリコード内の.Lで始るシンボル
　　　　　　内部だけで使われオブジェクトファイル出力時には登録されない

　　　　シンボルの可視性はLOCALがデフォルト

　　リンク
　　　　gcc -c file.c
　　　　　　オブジェクトファイル化

　　　　gcc file1.o file2.o ... -o bin
　　　　　　オブジェクトファイルを並べてgccで実行ファイル化

　　　　/usr/bin/ld
　　　　　　リンカ

　　　　よく使われるライブラリ
　　　　　　libc-*.*.*.so
　　　　　　　　glibc

　　　　　　libm-*.*.*.so
　　　　　　　　数学関係の関数の提供

　　　　　　libncurses.so.*.*
　　　　　　　　端末操作ライブラリ

　　　　パーシャルリンク
　　　　　　複数のリロケータブルファイルをリンクして一つのリロケータブルファイルを生成

　　リンクで行なわれる処理
　　　　セクションのマージ

　　　　再配置
　　　　　　他のオブジェクトファイルにおける実行コードの配置場所がかぶる場合にリンク時に再配置を行なう
　　　　　　※実際のところ単体のオブジェクトファイルにのってる番地はオフセットなのでいろいろとなんともいないところ

　　　　シンボルの解決
　　　　　　再配置と主に行なう事が多い。単体では解決できないシンボル情報にはまず仮のアドレスをわりあてをしておき
　　　　　　解決できるタイミングで解決

　　ダイナミックリンクとスタティックリンク
　　　　スタティックはld実行時にオブジェクトファイルを連結しアドレスを解決
　　　　ダイナミックはプログラム実行時メモリ上で連結処理
　　　　※共有するといわれてるメモリ空間ないのコードを書き換えて他プロセスからそのコードへアクセス

　　　　ダイナミックリンクの利点
　　　　　　ライブラリの更新が容易
　　　　　　ディスク容量節約
　　　　　　メモリ容量節約

　　　　ダイナミックリンクの欠点
　　　　　　少し遅い
　　　　　　リンクの確実性がない

　　　　ダイナミックリンク時の挙動
　　　　　　環境変数LS_LIBRARY_PATHにディレクトリ名を指定すると/libや/usr/libよりも先にそっちを検索

　　　　lddコマンド
　　　　　　共有ライブラリのダイナミックリンクの詳細

　　　　コンパイル時のオプション
　　　　　　-l** で lib**.so を読み込む
　　　　　　-static を指定するとスタティックリンクとなり lib**.a を読み込む

　　　　ライブラリの検索規則
　　　　　　-v を付けてコンパイルすることにより出力
　　　　　　-L～となっている部分がデフォルトの検索対象パス

　　　　　　標準のパス以外の場所にあるライブラリをリンクしたいときは以下のいずれか
　　　　　　　　gcc の -l オプションの変わりにフルパス指定
　　　　　　　　gcc に -L オプションを渡してディレクトリを検索パスに追加する

　　　　静的ライブラリの作成
　　　　共有ライブラリの管理

　　　　ローダによる共有ライブラリのキャッシュ化
　　　　　　ファイルと場所
　　　　　　　　/etc/ld.so.cache

　　　　　　共有ライブラリを新しくインストールした際は必ずこのキャッシュを更新する必要がある
　　　　　　更新する方法はスーパーユーザー権限で ldconfig コマンド

　　　　共有ライブラリの作成
　　　　共有ライブラリとのリンク

　　mmapシステムコール
　　　　void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset);
　　　　　　start :このアドレスからマッピング
　　　　　　length:この値の分
　　　　　　prot  :アクセス許可属性
　　　　　　flags :他プロセスとの共有方法
　　　　　　fd    :ファイルディスクリプタ
　　　　　　offset:fdで指定されるファイルに対する開始位置

　　readelfによるelfファイルと仮想メモリの対応の見方



------------------------------------------------------------------------------------------------------------------------
本書の内容とは少々関係ない本書に出てくる細かい知識や技術

　　sedコマンド
　　awkコマンド

------------------------------------------------------------------------------------------------------------------------
メモ
　　コンパイラの話を通して目次ありきと無しでどれくらい理解のしやすさに差がでるか説明可能っぽい


